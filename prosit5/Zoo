public class Zoo {

    private Animal[] animals;
    private Aquatic[] aquaticAnimals; // Tableau pour les animaux aquatiques
    private String name;
    private String city;
    private static final int NBRCages = 25;
    private static final int MAX_AQUATIC_ANIMALS = 10; // Limite pour le tableau aquaticAnimals
    int cp = 0;
    int aquaticCount = 0; // Compteur pour les animaux aquatiques

    public Zoo() {}

    public Zoo(String name, String city) {
        animals = new Animal[NBRCages];
        aquaticAnimals = new Aquatic[MAX_AQUATIC_ANIMALS]; // Initialisation du tableau
        this.name = name;
        this.city = city;
    }

    public void displayZoo() {
        System.out.println("Name: " + name + "\nCity: " + city + "\nNbr Cages: " + NBRCages);
    }

    @Override
    public String toString() {
        String ch1, ch2 = "";
        ch1 = "Name: " + name + "\nCity: " + city + "\nNbr Cages: " + NBRCages;
        for (int i = 0; i < cp; i++) {
            ch2 += animals[i].toString() + "\n";
        }
        return ch1 + "\n" + ch2;
    }

    public boolean addAnimal(Animal animal) {
        if (searchAnimal(animal) == -1) {
            animals[cp] = animal;
            cp++;
            return true;
        }
        return false;
    }

    public boolean addAquaticAnimal(Aquatic aquaticAnimal) {
        if (aquaticCount < MAX_AQUATIC_ANIMALS) {
            aquaticAnimals[aquaticCount] = aquaticAnimal;
            aquaticCount++;
            return true;
        }
        System.out.println("No more space for aquatic animals.");
        return false;
    }

    public int searchAnimal(Animal animal) {
        int indice = -1;
        for (int i = 0; i < cp; i++) {
            if (animals[i].getName().equals(animal.getName())) {
                indice = i;
            }
        }
        return indice;
    }

    public boolean removeAnimal(Animal animal) {
        int indice = searchAnimal(animal);
        if (indice == -1) {
            return false;
        }
        for (int i = indice; i < cp - 1; i++) {
            animals[i] = animals[i + 1];
        }
        cp--;
        animals[cp] = null;
        return true;
    }

    public boolean isZooFull() {
        if (cp == NBRCages) {
            System.out.println("Zoo is full");
            return true;
        }
        System.out.println("Zoo is not full");
        return false;
    }

    public static Zoo comparerZoo(Zoo z1, Zoo z2) {
        if (z1.cp < z2.cp) {
            return z2;
        }
        return z1;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public int getCp() {
        return cp;
    }

    public void setCp(int cp) {
        this.cp = cp;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
